<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="backgroundWorker1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>9, 18</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA////AP///wD///8A////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA////AH9/fwDU1NQVj4+RapGRkmXa2tkSqKenAP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA////AMfHxgDp6egMmJiZWVVVWMYgHyT8IiEm+llZXMCdnZ5R8vLwCtXU1AD///8AAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAOLi4QD///4GpaWmRmBgY7QmJSr3DQwS/wQDCf8FBAn/DQ0S/ykoLfVmZWisq6usPf//
        /wTr6+sAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAPLz8gD///8DsrKyNW1sb6EvLjPxEhEX/0VER/+Eg4T/KSgs/0A/Qv+Li4v/Pj5B/xIR
        Fv80Mzjtc3N1lrq6uiz///8B+fn4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAPz8/AD///8BwMDAJnh4eo05OT3oDQwS/yEgJf+Hh4j/x8fG/9DQz/9BQEP/aGdq/9PT
        0v/FxcX/gYGC/xoZHv8QDxX/Pz9D4oCAgYDKyskeAAAAAP7+/gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAMTEwwAtLTIAzc3NGoWEhnhEQ0fdFBMZ/xMSF/8FBAr/a2ps/7y7u/9kY2b/v76+/0FB
        RP9oaGr/q6ur/2JiZf/Hx8f/SEdK/wcGDP8TEhf/Fxcc/ktKTtONjY9p2NjXE7e3twCkpKMAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAycnJANLT0hdhYWS/GRke/hUUGf9cW17/nJyc/zQzN/9ycXP/oaGh/zAv
        M/+8vLv/QUFE/2loav+mpqb/LSww/7q6uf9JSEv/UVBU/6SkpP9VVVf/ExIX/x8fJPxqaWyw4uLiEM/P
        0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADExMUAxMTEIzU0OOQxMDT/np6e/8nIyP/T0tH/R0ZJ/3Fw
        cv+ioqL/MjE1/7y8vP9BQUT/aWhq/6enpv8vLzP/u7q6/0hISv9vbnH/z8/O/8fHxv+VlZb/Hh0i/zs6
        P9zU1NQbzs7OAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMTExQDExMQjNDM35Ghoav+6ubn/UE9S/7y7
        u/9HR0r/cXBy/6Khof8yMTX/vLy8/0FBRP9paGr/p6en/y8uMv+7urr/SEhL/29ucf+ko6P/UVFT/8bG
        xf9CQUX/Ojk+3NPT0xvOzs4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxMTFAMTExCM0MzfkaWhr/6al
        pf8uLjL/u7q6/0dHSv9xcHL/oqGh/zIxNf+8vLz/QUFE/2loav+mpqb/VFNW/8bGxf9ISEv/cXBz/6Sk
        pP8xMDT/vby8/0NCRf86OT3d09PTHM7OzgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADExMUAxMTEIzQz
        N+RpaGv/p6am/zAvM/+7urr/R0dK/3Fwcv+ioaH/MjE1/7y8vP9BQUT/aWhq/6alpf9ram3/vLy9/0FA
        RP9fXmH/kpKT/zAvM/+9vLz/Q0JF/zo5Pd3T09Mczs7OAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMTE
        xQDExMQjNDM35Gloa/+npqb/MC8z/7u6uv9HR0r/cXBy/6Khof8yMTX/vLy8/0FBRP9paGr/qKio/x0c
        If8eHSL/Dw4U/w0MEv8YFxz/Li0x/769vf9DQkb/OTk93dPT0xzOzs4AAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAxMTFAMTExCM0MzfkaWhr/6empv8wLzP/u7q6/0dHSv9xcHL/oaGh/zIxNf+8vLz/QUFE/2lo
        av+np6f/KCcr/4iIif85OTz/Ojk9/5aVlv+np6f/y8vK/0A/Q/85OD3d0tLSHM7OzgAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAADExMUAxMTEIzQzN+RpaGv/p6am/zAvM/+7urr/R0dK/3Fwcv+hoaH/MTE1/7y8
        vP9BQUT/aWhq/6emp/8wLzP/vby8/0lJS/9ubXD/xsbF/5KSlP97e33/GRgd/zs6P93S0tIczc3OAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAMTExQDExMQjNDM35Gloa/+mpqb/Ly4y/7u6uv9HR0r/cXBy/6Gg
        oP8wLzP/vLy8/0FBRP9paGr/p6am/y4tMf+7urr/SEhL/29ucf+ioaH/ISAl/2xrbf8qKS3/Ojo+3dLS
        0hzOzs4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxMTFAMTExCM0Mzfkamlr/7q5uf97env/w8PC/0dG
        Sv9xcHL/uLi3/3x7fP/Ew8P/QUBE/2hoav+7u7r/enp7/8TDwv9IR0r/b25x/7i4t/98fH3/xcXE/0ND
        Rv84ODzd0dHRHM3NzQAAAAAAAAAAAAAAAAAAAAAAAAAAANHPmAD//wAAwL+4LDU0N+VVVFb/u7u6/7i4
        t/+qqqr/Kiks/0JBQ/+2trX/ubm4/6iop/8mJSj/PDs+/7W0s/+4uLf/q6qq/yopLP9BQEP/tbW0/7m5
        uP+pqKj/NTU3/z4+QN/Lyr8m6OJ+AdfUpwAAAAAAAAAAAAAAAAAeIAAASEOfADo2hUhnY6PJPTpz+TEu
        Yv8xLmj/LCln/zAsZf8lIlr/Ih9Z/y0qZf8xLmn/Kyhj/x8cWP8rKF3/KCVj/zYza/81M2j/Kyhd/yAd
        WP8tKmX/MS1o/y8sZf8sKl//Pzx292Jensp1cpRQUU2KAKyopgAAAAAAAAAAACEeRgAYGAADJyKTonJu
        w/9xbcT/bmrD/2Rfvv9QS7b/cGzE/5KP0/9kX7//WFS6/1lUuv9iXr7/a2fC/3Nvxf8vKaj/ZF+//2Jd
        vv9/e8r/Y1+//1hTuv9YU7n/ambB/3l1yP+Df8z/b2u//01Ik6D//6QBr6upAAAAAAAAAAAAIR9GABka
        AAMnIZOjb2vB/21pwv9qZsH/bGjC/1pWu/9wbMT/h4TN/2Bcvf9pZcH/YFy9/2hkwP9va8P/cW3E/y8p
        qf9hXb7/X1u9/3t4yP9gW73/aGTA/2Nevv9mYr//dnLH/4J+y/9kYLr/NzKOgAAArACtqaYAAAAAAAAA
        AAAeIAAAJB+bACAcfThMSJ2WNjNt8iUiV/8uK2D/JyRb/yYjW/8qKF//JyRc/zMxZP8pJl3/KSZe/ygl
        Xf8rKV3/GhdS/yEeVv8pJlz/Kidc/yAdVv8rKV3/Kidc/yglXf8iIFX/NzRv8EE9l440MHsjKiZ+AAAA
        AAAAAAAAAAAAAAAAAAAAAAAAxcXEAMXFwyM1NDfkRkVH/5eXlv9ycnL/e3p6/4aFhf96enr/jo6O/2Fh
        Yv+RkZD/a2pr/2dnZ/8WFhn/JCMm/2VkZP9jYmP/Wlla/25ubv98fHz/lJST/zExM/84ODre0NDOHc3N
        ywAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADExMUAxMTEIzY1OeQ9PUD/amlr/42Mjf+Kiov/LS0x/3Nz
        dP9GRUj/Pz9C/3h3ef8bGh//goKD/xoaHv8tLDD/goGC/4SDhP+dnJ3/k5KT/4WFhv+CgoP/SklM/zc2
        O9/Ozs4dy8vLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMTExQDExMQjNTQ45EtLTv+bm5z/c3N0/4KB
        gv8aGh7/cXFz/4ODhP9LSk3/np2e/z8+Qf+NjY7/fn5//1taXf99fX7/kpGS/728vP+Pjo//goKD/3t6
        fP87Oj7/ODc7383NzR7Ly8sAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxMTFAMTExCM0NDjkYWFj/3h3
        ef9lZWf/hYSF/xsbH/9vbnD/W1td/z8+Qv+IiIn/JiUq/4WEhf+JiIn/iYiJ/3t6e/+fn5//p6en/4aG
        h/+Hh4j/bGxt/zk5Pf84Nzvfzc3NHsrKywAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADExMQAxMTEIzQ0
        OOQyMTb/h4aI/29ucP92dXf/Ghke/29vcf9ubW//U1NV/3l5ef8ZGR3/gYGC/3Z1d/+JiYr/fX1+/5iY
        mP9zc3T/b29x/3d3ef+GhYf/JyYr/zc2O9/Nzc0eysrKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMnJ
        yQDLy8sdX19ixiopLvIhICX9FRQa/xkYHf8HBgz/Kiku/11dYP9OTVH/h4aI/2pqbP+Af4H/jY2O/0xL
        T/87Oz7/Ly4z/xgXHP8VFBr/ERAW/xoZHv8iISb7WVlcztHR0RvNzc0AAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA0NDQANfX1gPMzMwbq6usN46OkFl2dnh/X19ipUxMT8c3NjviJSQp9RkYHf4UExn/EhEX/xIR
        Fv8UExn/GBcc/iQjKPcyMjbnRURI0FhXWrNsbG+QgoKEbJqam0q5ubop2dnYBNLS0QAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////AP///wD///8C8/TzDsfHxyKko6Q+iIiKYXFw
        c4hcW16sXFterHBvcomGhYdlnp6fRL29vSjo6OcT////Bf///wD///8AAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAD///8A////AP///wX///8E////AP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/////////////D////AP///AA///AAD//AAAf/gAAB/wAAAP8AAAD/AA
        AA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAB+AAAAfAAAADwAAAB+AAAAfwAAAP8AAAD/AA
        AA/wAAAP8AAAD/AAAA/wAAAP/4AB///+f/8=
</value>
  </data>
</root>